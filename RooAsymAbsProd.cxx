/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooAsymAbsProd.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooAsymAbsProd) 

 RooAsymAbsProd::RooAsymAbsProd(const char *name, const char *title, 
                        RooAbsReal& _neg_factor,
                        RooAbsReal& _pos_factor,
                        RooAbsReal& _base_par,
                        bool _same_initial_and_final
                        ) :
   RooAbsReal(name,title), 
   neg_factor("neg_factor","neg_factor",this,_neg_factor),
   pos_factor("pos_factor","pos_factor",this,_pos_factor),
   base_par("base_par","base_par",this,_base_par),
   same_initial_and_final(_same_initial_and_final)
 { 
 } 


 RooAsymAbsProd::RooAsymAbsProd(const RooAsymAbsProd& other, const char* name) :  
   RooAbsReal(other,name), 
   neg_factor("neg_factor",this,other.neg_factor),
   pos_factor("pos_factor",this,other.pos_factor),
   base_par("base_par",this,other.base_par),
   same_initial_and_final(other.same_initial_and_final)
 { 
 } 



 Double_t RooAsymAbsProd::evaluate() const 
 { 
   if ( same_initial_and_final ) {
      if ( base_par > 0 ) {
         double rv = 1. - base_par * ( 1 - pos_factor ) ;
         if ( rv < 0 ) { rv = 0. ; }
         return rv ;
      } else {
         double rv = 1. - fabs(base_par) * ( 1 - fabs(neg_factor) ) ;
         if ( rv < 0 ) { rv = 0. ; }
         return rv ;
      }
   } else {
      if ( base_par > 0 ) {
         return base_par * pos_factor ;
      } else {
         return fabs( base_par * neg_factor ) ;
      }
   }

 } 



